<template>
  <div class="v-clock">
    <Menu
      theme="light"
      width="auto"
      accordion
      @on-open-change="twoMenu"
      :active-name="activeName"
      :open-names="openActiveName"
      ref="menu">
      <div v-for="(item,index) in leftMenu" :key="index">
        <Menu-item :name="item.url" v-if="item.name == '首页'" @click.native="clickMenu(item.name,item.url)">
          {{item.name}}
        </Menu-item>
        <Submenu v-if="item.name != '首页'" :name="item.url">
          <template slot="title" style="background: #5cadff;">
            {{item.name}}
          </template>
          <div v-for="(sub,index) in item.firstLayerNav" :key="index">
            <Submenu v-if="sub.subItem != undefined" :name="sub.url">
              <template slot="title">
                {{sub.name}}
              </template>
              <Menu-item
                v-if="sub.subItem != undefined"
                v-for="(small,index) in sub.subItem"
                :name="small.url" :key="index"
                @click.native="clickMenu(small.name,small.url)">
                {{small.name}}
              </Menu-item>
            </Submenu>
            <Menu-item
              v-else
              :name="sub.url"
              @click.native="clickMenu(sub.name,sub.url)">
              {{sub.name}}
            </Menu-item>
          </div>
        </Submenu>
      </div>
    </Menu>
  </div>
</template>

<script>

    export default {
        name: "leftNavigation",
        components: {},
        props: ['leftMenu'],
        data() {
            return {
              activeName:this.$store.getters.leftMenuActive,
              openActiveName:this.$store.getters.openLeftMenuItem,
              name:this.$store.getters.openLeftMenuItem
            }
        },
        computed: {},
        watch: {},
        methods: {
          clickMenu(name,id) {
            if(name == '首页'){
              this.openActiveName = [];
              this.$nextTick(()=>{
                this.$refs.menu.updateOpened()
                this.$refs.menu.updateActiveName()
              })
              this.activeName = id;
              this.$store.commit('openLeftMenuItem',this.openActiveName)
              this.$store.commit('leftMenuActive',id)
            }else{
              this.openActiveName = [];
              const x = this.$store.getters.openLeftMenuItem;
              x.push(id)
              this.$store.commit('openLeftMenuItem',x)
              this.openActiveName.push(name);
              this.name = this.$store.getters.openLeftMenuItem;
              this.$store.commit('leftMenuActive',id)
            }
            this.$router.push({
              name: id
            });
          },
          twoMenu(name){
            this.name = name.toString();
            this.$store.commit('openLeftMenuItem',name)
          },
          leftMenuAn(){
            if(this.$store.getters.openLeftMenuItem != null){
              if(this.$store.getters.openLeftMenuItem.length == 0 || this.$store.getters.openLeftMenuItem.length == 1){
                this.openActiveName = [];
              }else{
                if(this.$store.getters.openLeftMenuItem.subItem == undefined){
                  this.openActiveName = this.$store.getters.openLeftMenuItem;
                }else{
                  this.openActiveName = this.$store.getters.openLeftMenuItem[0];
                }
                this.activeName = this.$store.getters.leftMenuActive
              }

              this.$nextTick(()=>{
                this.$refs.menu.updateOpened()
                this.$refs.menu.updateActiveName()
              })
            }
          }
        },
        created() {

        },
        mounted() {
          this.leftMenuAn();
        },
    }
</script>

<style scoped lang="less">
    @deep: ~'>>>';
    @{deep}.ivu-card-body {
        padding: 10px !important;
    }
</style>
