<template>
  <div class="v-clock">
   <Card>
     <Row>
       <i-button type="primary"  icon="ios-add" @click="addBusiness" >添加</i-button>
       <div style="float: right">
         <i-input clearable v-model="search.content" placeholder="请输入关键字" style="width: 300px"></i-input>
         <i-button type="primary"  icon="ios-search" @click="getIndex(1,search)">查询</i-button>
       </div>
     </Row>
     <Divider style="height: 2px;background-color:#eeeeee;margin-top: 10px;margin-bottom: 10px;"/>
       <tableTemplate
         :tableList="tableList"
         :columns="columns"
         :page="page"
         :size="'small'"
         @changePage="changePage">
       </tableTemplate>
   </Card>



    <Modal
      v-model="addBusinessModal"
      :title="addBusinessTitle"
      :loading="addBusinessLoading"
      :mask-closable="false"
      @on-ok="addBusinessOk('addBusinessUser')"
      @on-cancel="addBusinessCancel"
      width="600"
      ok-text = '保存'
      cancel-text = '取消'>
      <businessForm
        ref="businessForm"
        :addBusinessUser="addBusinessUser"
        :addBusinessItem="addBusinessItem">
      </businessForm>
    </Modal>
  </div>


</template>


<script>
  import { postNamesGetByPage,postNamesInsert,postNamesUpdate,postNamesDeleteById } from '@/axios/api';
  import tableTemplate from '@/commonComponent/tableTemplate'
  import businessForm from './postNamesForm'
  export default {
    name: "postNamesIndex",
    components: {
      tableTemplate,
      businessForm,
    },
    data() {
      return {
        tableList:{},
        page:{
          current:1,
          size:20,
        },
        search:{
          content:null,
        },
        columns: [
          {
            title:'序号',
            type: 'index',
            width: 80,
            align: 'center'
          },
          {
            title: '岗位名称',
            key: 'name',
            align: 'center',
          },
          {
            title: '排序码',
            key: 'sort',
            align: 'center',
          },
          {
            title: '备注',
            key: 'remarks',
            align: 'center',
          },
          {
            title: '最新维护时间',
            align: 'center',
            width: 150,
            render: (h, params) => {
              if(params.row.updateTime == null){
                return h('span',{
                  'style':{
                    // 'color':'red'
                  }
                },'无')
              }else{
                return h('span',{},this.$moment(params.row.updateTime).format('YYYY-MM-DD HH:mm'))
              }
            }
          },
          {
            title: '维护人',
            align: 'center',
            render: (h, params) => {
              if(params.row.userName == null || params.row.phone == null){
                return h('div', [
                  h('div',{
                    class:'fontColor',
                  },'无')
                ]);
              }else{
                return h('div', [
                  h('div',{
                    class:'fontColor',
                  },params.row.userName + '-' + params.row.phone)
                ]);
              }

            },
          },
          {
            title: '是否启用',
            key: 'enable',
            align: 'center',
            width: 90,
            render: (h, params) => {
              return h('div',this.$Filters.enableType(params.row.enable))
            }
          },
          {
            title: '操作',
            key: 'action',
            width: 200,
            align: 'center',
            render: (h, params) => {
                return h('a', [
                  h('img', {
                    style: {
                      height: '20px',
                      width: '20px',
                    },
                    attrs: {
                      src: require('../../../assets/images/编辑.png')
                    },
                    on: {
                      click: e => {
                        e.stopPropagation();
                        this.edit(params.row)
                      }
                    }
                  }),
                  h('Divider', {props: {type: 'vertical'}}),
                  h('img', {
                    style: {
                      height: '20px',
                      width: '20px',
                    },
                    attrs: {
                      src: require('../../../assets/images/删除.png')
                    },
                    on: {
                      click: e => {
                        e.stopPropagation();
                        this.delete(params.row.id)
                      }
                    }
                  },),

                ])
            }
          }
        ],


        addBusinessModal:false,
        addBusinessTitle:'',
        addBusinessLoading:true,
        addBusinessUser:{},
        addBusinessItem:{
          enableItem:[
            {
              value:0,
              label:'是',
            },
            {
              value:1,
              label:'否',
            },
          ],
        },


        user:this.$store.getters.submitData,
      }
    },
    methods: {
      getIndex(page,query){
        let data = {
          pageNum:page
        }
        if(query){
          data.keyWords = query.content
        }
        postNamesGetByPage(data)
        .then(res => {
          this.tableList = res;
        }).catch(err => {
          this.$Message.error(err);
        })
      },
      changePage(page){
        this.page.current = page;
        this.getIndex(page)
      },
      addBusiness(){
        this.addBusinessUser = {}
        this.addBusinessUser.enable = 0
        this.addBusinessTitle = '新建/岗位信息'
        this.addBusinessModal = true;
      },
      delete(id){
        let self = this;
        this.$Modal.confirm({
          title: '删除',
          content: '是否确认删除？删除后，该信息将不再可见，请谨慎操作！',
          width: '400px',
          okText: '确定',
          cancelText: '关闭',
          onOk: function () {
            postNamesDeleteById({
              userId: self.user.user.id,
              id:id
            }).then(res => {
              self.getIndex(1);
            }).catch(err => {
              this.$Message.error(err);
            })
          }
        })
      },
      addBusinessOk(content){
        this.$refs.businessForm.$refs[content].validate((valid) => {
          if (valid) {
            this.postDepartments();
          } else {
            setTimeout(() => {
              this.addBusinessLoading = false;
              this.$nextTick(() => {
                this.addBusinessLoading = true;
              });
            }, 2000);
          }
        })
      },
      postDepartments(){
        if(this.addBusinessUser.id){
          postNamesUpdate({
            id: this.addBusinessUser.id,
            name: this.addBusinessUser.name,
            enable: this.addBusinessUser.enable,
            sort: this.addBusinessUser.sort,
            status: this.addBusinessUser.status,
            remarks: this.addBusinessUser.remarks,
            userId:this.user.user.id,
            userName:this.user.user.name,
            phone: this.user.user.phone,
          })
            .then(res => {
              this.addBusinessModal = false;
              this.getIndex(1);
            })
            .catch(err => {
              this.$Message.error(err);
            })
        }else{
          postNamesInsert({
            name: this.addBusinessUser.name,
            enable: this.addBusinessUser.enable,
            sort: this.addBusinessUser.sort,
            status: this.addBusinessUser.status,
            remarks: this.addBusinessUser.remarks,
            userId:this.user.user.id,
            userName:this.user.user.name,
            phone: this.user.user.phone,
          })
            .then(res => {
              this.addBusinessModal = false;
              this.getIndex(1);
            })
            .catch(err => {
              this.$Message.error(err);
            })
        }
        this.addBusinessModal = false;
      },
      addBusinessCancel(content){
        this.addBusinessModal = false;
      },
      edit(item) {
        this.addBusinessUser = item
        this.addBusinessUser.sort = item.sort.toString()
        this.addBusinessTitle = '编辑/岗位信息'
        this.addBusinessModal = true;
      },
    },
		created() {},
		mounted() {
			 this.getIndex(1);
		},
  }
</script>
<style scoped lang="less">
    @deep: ~'>>>';
    @{deep}.ivu-card-body {
        padding: 10px !important;
    }
    @{deep}.ivu-modal-footer{
      text-align: center!important;
    }
</style>>
